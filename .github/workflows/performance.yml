# File: .github/workflows/performance.yml
# Day 6: Performance testing pipeline

name: Performance Tests

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL for performance testing'
        required: true
        default: 'http://localhost:8000'

jobs:
  performance-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Start application
      run: |
        docker-compose up -d --build
        sleep 30  # Wait for services to be ready

    - name: Wait for application to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        cat > performance-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export const options = {
          stages: [
            { duration: '30s', target: 10 },   // Ramp up
            { duration: '1m', target: 50 },    // Stay at 50 users
            { duration: '30s', target: 0 },    // Ramp down
          ],
          thresholds: {
            http_req_duration: ['p(95)<500'], // 95% of requests under 500ms
            http_req_failed: ['rate<0.1'],    // Error rate under 10%
          },
        };

        export default function () {
          // Test health endpoint
          let healthRes = http.get('http://localhost:8000/health');
          check(healthRes, {
            'health status is 200': (r) => r.status === 200,
          });

          // Test main API endpoints
          let locationRes = http.get('http://localhost:8000/locations/cape-town');
          check(locationRes, {
            'location status is 200': (r) => r.status === 200,
            'location has coordinates': (r) => r.json().coordinates !== undefined,
          });

          // Test sensor creation
          let payload = JSON.stringify({
            sensor_type: 'temperature',
            value: 25.5,
            location_name: 'Cape Town'
          });
          let params = {
            headers: {
              'Content-Type': 'application/json',
            },
          };
          let sensorRes = http.post('http://localhost:8000/sensors', payload, params);
          check(sensorRes, {
            'sensor creation status is 200': (r) => r.status === 200,
          });

          sleep(1);
        }
        EOF

        k6 run performance-test.js

    - name: Stop application
      run: |
        docker-compose down
